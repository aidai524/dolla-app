import { useEffect, useRef, useState } from "react";
import Chart from "chart.js/auto";
import clsx from "clsx";

interface DoughnutChartProps {
  data: any;
  formatLabel: (record: any) => React.ReactNode;
  className?: string;
}

// ⚠️ Generated by Cursor AI
export default function DoughnutChart({ data, formatLabel, className }: DoughnutChartProps) {
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstance = useRef<Chart | null>(null);
  const [selectedIndex, setSelectedIndex] = useState(0);

  useEffect(() => {
    if (!chartRef.current) return;

    // Destroy existing chart instance
    if (chartInstance.current) {
      chartInstance.current.destroy();
    }

    const ctx = chartRef.current.getContext("2d");
    if (!ctx) return;

    // Prepare chart data
    const chartData = {
      labels: data.map((item: any) => item.label),
      datasets: [
        {
          data: data.map((item: any) => item.value),
          backgroundColor: data.map((item: any, index: number) => {
            if (index === selectedIndex) {
              // Create gradient for selected segment
              const canvas = chartRef.current;
              if (canvas) {
                const ctx = canvas.getContext('2d');
                if (ctx) {
                  const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
                  gradient.addColorStop(0, '#FFF698');
                  gradient.addColorStop(1, '#FFC42F');
                  return gradient;
                }
              }
              return '#FFE9B2'; // Fallback color
            }
            return "#2B2C2F"; // Dark gray for unselected segments
          }),
          borderWidth: 2,
          borderColor: "#000", // Background color for gaps
          cutout: "78%", // Doughnut chart inner radius
        }
      ]
    };

    // Create chart configuration
    const config = {
      type: "doughnut" as const,
      data: chartData,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false, // Hide legend
          },
          tooltip: {
            enabled: false, // Disable default tooltip
          }
        },
        onClick: (event: any, elements: any[]) => {
          if (elements.length > 0) {
            const index = elements[0].index;
            setSelectedIndex(index);
          }
        },
        elements: {
          arc: {
            borderWidth: 0,
          }
        }
      }
    };

    // Create chart instance
    chartInstance.current = new Chart(ctx, config);

    // Cleanup function
    return () => {
      if (chartInstance.current) {
        chartInstance.current.destroy();
      }
    };
  }, [data]);

  // Update chart colors when selectedIndex changes
  useEffect(() => {
    if (!chartInstance.current) return;

    const canvas = chartInstance.current.canvas;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Update colors for all segments
    const newColors = data.map((item: any, index: number) => {
      if (index === selectedIndex) {
        // Create gradient for selected segment
        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
        gradient.addColorStop(0, '#FFF698');
        gradient.addColorStop(1, '#FFC42F');
        return gradient;
      }
      return "#2B2C2F"; // Dark gray for unselected segments
    });

    // Update the chart data
    chartInstance.current.data.datasets[0].backgroundColor = newColors;
    chartInstance.current.update('none'); // Update without animation
  }, [selectedIndex, data]);

  // Calculate center record - show selected record
  const centerRecord = data[selectedIndex] || data[0] || { value: 0, label: "0" };

  return (
    <div className={clsx("relative w-full h-full", className)}>
      <canvas ref={chartRef} className="w-full h-full" />
      
      {/* Center text content */}
      <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
        {formatLabel(centerRecord)}
      </div>
    </div>
  );
}
